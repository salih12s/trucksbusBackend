
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.14.0
 * Query Engine version: 717184b7b35ea05dfa71a3236b7af656013e1e49
 */
Prisma.prismaVersion = {
  client: "6.14.0",
  engine: "717184b7b35ea05dfa71a3236b7af656013e1e49"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.Blocked_usersScalarFieldEnum = {
  id: 'id',
  blocker_id: 'blocker_id',
  blocked_id: 'blocked_id',
  created_at: 'created_at'
};

exports.Prisma.BrandsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  vehicle_type_id: 'vehicle_type_id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  image_url: 'image_url'
};

exports.Prisma.CategoriesScalarFieldEnum = {
  id: 'id',
  name: 'name',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Category_attributesScalarFieldEnum = {
  id: 'id',
  category_id: 'category_id',
  vehicle_type_id: 'vehicle_type_id',
  key: 'key',
  label: 'label',
  type: 'type',
  is_required: 'is_required',
  is_filterable: 'is_filterable',
  sort_order: 'sort_order',
  options: 'options'
};

exports.Prisma.CitiesScalarFieldEnum = {
  id: 'id',
  name: 'name',
  plate_code: 'plate_code',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.ComplaintsScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  target_type: 'target_type',
  target_user_id: 'target_user_id',
  target_listing_id: 'target_listing_id',
  category: 'category',
  description: 'description',
  status: 'status',
  admin_response: 'admin_response',
  admin_id: 'admin_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Conversation_countersScalarFieldEnum = {
  conversation_id: 'conversation_id',
  last_message_id: 'last_message_id',
  last_message_preview: 'last_message_preview',
  last_message_at: 'last_message_at'
};

exports.Prisma.Conversation_participantsScalarFieldEnum = {
  id: 'id',
  conversation_id: 'conversation_id',
  user_id: 'user_id',
  role: 'role',
  joined_at: 'joined_at'
};

exports.Prisma.Conversation_unread_countersScalarFieldEnum = {
  id: 'id',
  conversation_id: 'conversation_id',
  user_id: 'user_id',
  unread_count: 'unread_count',
  updated_at: 'updated_at'
};

exports.Prisma.ConversationsScalarFieldEnum = {
  id: 'id',
  listing_id: 'listing_id',
  least_user_id: 'least_user_id',
  greatest_user_id: 'greatest_user_id',
  created_at: 'created_at'
};

exports.Prisma.DistrictsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  city_id: 'city_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.FavoritesScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  listing_id: 'listing_id',
  created_at: 'created_at'
};

exports.Prisma.Feature_definitionsScalarFieldEnum = {
  id: 'id',
  group_id: 'group_id',
  key: 'key',
  label: 'label',
  sort_order: 'sort_order'
};

exports.Prisma.Feature_groupsScalarFieldEnum = {
  id: 'id',
  vehicle_type_id: 'vehicle_type_id',
  name: 'name',
  label: 'label',
  sort_order: 'sort_order'
};

exports.Prisma.Listing_imagesScalarFieldEnum = {
  id: 'id',
  listing_id: 'listing_id',
  url: 'url',
  alt: 'alt',
  sort_order: 'sort_order'
};

exports.Prisma.Listing_propertiesScalarFieldEnum = {
  id: 'id',
  listing_id: 'listing_id',
  key: 'key',
  value: 'value',
  type: 'type'
};

exports.Prisma.ListingsScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  price: 'price',
  year: 'year',
  category_id: 'category_id',
  vehicle_type_id: 'vehicle_type_id',
  brand_id: 'brand_id',
  model_id: 'model_id',
  variant_id: 'variant_id',
  status: 'status',
  is_active: 'is_active',
  is_approved: 'is_approved',
  is_pending: 'is_pending',
  view_count: 'view_count',
  is_promoted: 'is_promoted',
  approved_by: 'approved_by',
  approved_at: 'approved_at',
  rejected_at: 'rejected_at',
  reject_reason: 'reject_reason',
  seller_name: 'seller_name',
  seller_phone: 'seller_phone',
  seller_email: 'seller_email',
  city_id: 'city_id',
  district_id: 'district_id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  user_id: 'user_id',
  color: 'color',
  engine_power: 'engine_power',
  engine_volume: 'engine_volume',
  fuel_type: 'fuel_type',
  is_exchangeable: 'is_exchangeable',
  km: 'km',
  license_plate: 'license_plate',
  neighborhood_id: 'neighborhood_id',
  transmission: 'transmission',
  vehicle_condition: 'vehicle_condition',
  images: 'images',
  moderation_status: 'moderation_status',
  body_type: 'body_type',
  cabin_type: 'cabin_type',
  carrying_capacity: 'carrying_capacity',
  damage_record: 'damage_record',
  drive_type: 'drive_type',
  features: 'features',
  paint_change: 'paint_change',
  plate_origin: 'plate_origin',
  tire_condition: 'tire_condition',
  tramer_record: 'tramer_record'
};

exports.Prisma.Message_readsScalarFieldEnum = {
  id: 'id',
  conversation_id: 'conversation_id',
  user_id: 'user_id',
  last_read_message_id: 'last_read_message_id',
  updated_at: 'updated_at'
};

exports.Prisma.MessagesScalarFieldEnum = {
  id: 'id',
  conversation_id: 'conversation_id',
  sender_id: 'sender_id',
  body: 'body',
  attachment_url: 'attachment_url',
  status: 'status',
  created_at: 'created_at'
};

exports.Prisma.ModelsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  brand_id: 'brand_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.FeedbackScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  type: 'type',
  subject: 'subject',
  message: 'message',
  priority: 'priority',
  status: 'status',
  admin_response: 'admin_response',
  admin_id: 'admin_id',
  responded_at: 'responded_at',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.NotificationsScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  type: 'type',
  title: 'title',
  message: 'message',
  data: 'data',
  is_read: 'is_read',
  created_at: 'created_at'
};

exports.Prisma.User_unread_countersScalarFieldEnum = {
  user_id: 'user_id',
  total_unread: 'total_unread',
  updated_at: 'updated_at'
};

exports.Prisma.UsersScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  first_name: 'first_name',
  last_name: 'last_name',
  username: 'username',
  phone: 'phone',
  city: 'city',
  district: 'district',
  role: 'role',
  is_active: 'is_active',
  is_email_verified: 'is_email_verified',
  reset_password_token: 'reset_password_token',
  reset_password_expires: 'reset_password_expires',
  last_login: 'last_login',
  login_attempts: 'login_attempts',
  lock_until: 'lock_until',
  created_at: 'created_at',
  updated_at: 'updated_at',
  email_verification_expires: 'email_verification_expires',
  email_verification_token: 'email_verification_token',
  google_id: 'google_id',
  provider: 'provider',
  refresh_token: 'refresh_token',
  refresh_token_expires: 'refresh_token_expires',
  avatar: 'avatar'
};

exports.Prisma.VariantsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  model_id: 'model_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Vehicle_typesScalarFieldEnum = {
  id: 'id',
  name: 'name',
  category_id: 'category_id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  image_url: 'image_url'
};

exports.Prisma.Conversation_hiddenScalarFieldEnum = {
  id: 'id',
  conversation_id: 'conversation_id',
  user_id: 'user_id',
  hidden_at: 'hidden_at'
};

exports.Prisma.ReportsScalarFieldEnum = {
  id: 'id',
  listing_id: 'listing_id',
  reporter_id: 'reporter_id',
  owner_id: 'owner_id',
  reason: 'reason',
  description: 'description',
  status: 'status',
  resolution_note: 'resolution_note',
  reviewer_id: 'reviewer_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Report_historyScalarFieldEnum = {
  id: 'id',
  report_id: 'report_id',
  actor_id: 'actor_id',
  action: 'action',
  from_status: 'from_status',
  to_status: 'to_status',
  note: 'note',
  created_at: 'created_at'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.PropertyType = exports.$Enums.PropertyType = {
  STRING: 'STRING',
  NUMBER: 'NUMBER',
  BOOLEAN: 'BOOLEAN',
  SELECT: 'SELECT',
  MULTISELECT: 'MULTISELECT'
};

exports.ComplaintTarget = exports.$Enums.ComplaintTarget = {
  LISTING: 'LISTING',
  USER: 'USER'
};

exports.ComplaintCategory = exports.$Enums.ComplaintCategory = {
  MISLEADING_FAKE_AD: 'MISLEADING_FAKE_AD',
  WRONG_CATEGORY: 'WRONG_CATEGORY',
  SPAM_DUPLICATE: 'SPAM_DUPLICATE',
  FRAUD_SUSPICION: 'FRAUD_SUSPICION',
  INAPPROPRIATE_CONTENT: 'INAPPROPRIATE_CONTENT',
  HARASSMENT_ABUSE: 'HARASSMENT_ABUSE',
  PROHIBITED_ITEM: 'PROHIBITED_ITEM',
  OTHER: 'OTHER'
};

exports.ComplaintStatus = exports.$Enums.ComplaintStatus = {
  PENDING: 'PENDING',
  RESOLVED: 'RESOLVED',
  REJECTED: 'REJECTED'
};

exports.ListingStatus = exports.$Enums.ListingStatus = {
  DRAFT: 'DRAFT',
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  SOLD: 'SOLD',
  EXPIRED: 'EXPIRED',
  REJECTED: 'REJECTED',
  PENDING: 'PENDING'
};

exports.ModerationStatus = exports.$Enums.ModerationStatus = {
  ACTIVE: 'ACTIVE',
  REMOVED_BY_MODERATION: 'REMOVED_BY_MODERATION'
};

exports.MessageStatus = exports.$Enums.MessageStatus = {
  SENT: 'SENT',
  DELIVERED: 'DELIVERED',
  READ: 'READ'
};

exports.FeedbackType = exports.$Enums.FeedbackType = {
  COMPLAINT: 'COMPLAINT',
  SUGGESTION: 'SUGGESTION',
  BUG_REPORT: 'BUG_REPORT',
  FEATURE_REQUEST: 'FEATURE_REQUEST',
  GENERAL: 'GENERAL'
};

exports.Priority = exports.$Enums.Priority = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  URGENT: 'URGENT'
};

exports.FeedbackStatus = exports.$Enums.FeedbackStatus = {
  OPEN: 'OPEN',
  IN_PROGRESS: 'IN_PROGRESS',
  RESOLVED: 'RESOLVED',
  CLOSED: 'CLOSED'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  LISTING_APPROVED: 'LISTING_APPROVED',
  LISTING_REJECTED: 'LISTING_REJECTED',
  LISTING_EXPIRED: 'LISTING_EXPIRED',
  GENERAL: 'GENERAL',
  COMPLAINT_RESPONSE: 'COMPLAINT_RESPONSE',
  MESSAGE_RECEIVED: 'MESSAGE_RECEIVED',
  CONVERSATION_NEW: 'CONVERSATION_NEW',
  REPORT_NEW: 'REPORT_NEW',
  REPORT_RESOLVED_ACCEPTED: 'REPORT_RESOLVED_ACCEPTED',
  REPORT_RESOLVED_REJECTED: 'REPORT_RESOLVED_REJECTED',
  LISTING_REMOVED: 'LISTING_REMOVED',
  FEEDBACK_RESPONSE: 'FEEDBACK_RESPONSE',
  LISTING_PUBLISHED: 'LISTING_PUBLISHED',
  FEEDBACK_NEW: 'FEEDBACK_NEW'
};

exports.UserRole = exports.$Enums.UserRole = {
  USER: 'USER',
  ADMIN: 'ADMIN',
  CORPORATE: 'CORPORATE'
};

exports.ReportReason = exports.$Enums.ReportReason = {
  FRAUD: 'FRAUD',
  NUDITY: 'NUDITY',
  WRONG_CATEGORY: 'WRONG_CATEGORY',
  MISLEADING_INFO: 'MISLEADING_INFO',
  COPYRIGHT: 'COPYRIGHT',
  OTHER: 'OTHER'
};

exports.ReportStatus = exports.$Enums.ReportStatus = {
  OPEN: 'OPEN',
  UNDER_REVIEW: 'UNDER_REVIEW',
  ACCEPTED: 'ACCEPTED',
  REJECTED: 'REJECTED'
};

exports.ReportAction = exports.$Enums.ReportAction = {
  CREATE: 'CREATE',
  STATUS_CHANGE: 'STATUS_CHANGE',
  NOTE_ADDED: 'NOTE_ADDED',
  LISTING_REMOVED: 'LISTING_REMOVED'
};

exports.Prisma.ModelName = {
  blocked_users: 'blocked_users',
  brands: 'brands',
  categories: 'categories',
  category_attributes: 'category_attributes',
  cities: 'cities',
  complaints: 'complaints',
  conversation_counters: 'conversation_counters',
  conversation_participants: 'conversation_participants',
  conversation_unread_counters: 'conversation_unread_counters',
  conversations: 'conversations',
  districts: 'districts',
  favorites: 'favorites',
  feature_definitions: 'feature_definitions',
  feature_groups: 'feature_groups',
  listing_images: 'listing_images',
  listing_properties: 'listing_properties',
  listings: 'listings',
  message_reads: 'message_reads',
  messages: 'messages',
  models: 'models',
  feedback: 'feedback',
  notifications: 'notifications',
  user_unread_counters: 'user_unread_counters',
  users: 'users',
  variants: 'variants',
  vehicle_types: 'vehicle_types',
  conversation_hidden: 'conversation_hidden',
  reports: 'reports',
  report_history: 'report_history'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
