generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                                                 String          @id @default(cuid())
  email                                              String          @unique
  password                                           String?
  first_name                                         String
  last_name                                          String
  username                                           String?         @unique
  phone                                              String?
  city                                               String?
  district                                           String?
  role                                               UserRole        @default(USER)
  is_active                                          Boolean         @default(true)
  is_email_verified                                  Boolean         @default(false)
  reset_password_token                               String?
  reset_password_expires                             DateTime?
  last_login                                         DateTime?
  login_attempts                                     Int             @default(0)
  lock_until                                         DateTime?
  created_at                                         DateTime        @default(now())
  updated_at                                         DateTime
  email_verification_expires                         DateTime?
  email_verification_token                           String?
  google_id                                          String?         @unique(map: "idx_users_google_id")
  provider                                           String?         @default("email")
  refresh_token                                      String?
  refresh_token_expires                              DateTime?
  complaints_complaints_target_user_idTousers        complaints[]    @relation("complaints_target_user_idTousers")
  complaints_complaints_user_idTousers               complaints[]    @relation("complaints_user_idTousers")
  conversations_conversations_participant1_idTousers conversations[] @relation("conversations_participant1_idTousers")
  conversations_conversations_participant2_idTousers conversations[] @relation("conversations_participant2_idTousers")
  favorites                                          Favorite[]
  listings                                           Listing[]
  messages                                           Message[]
  notifications                                      Notification[]

  @@map("users")
}

model Category {
  id                  String                @id @default(cuid())
  name                String
  created_at          DateTime              @default(now())
  updated_at          DateTime
  category_attributes category_attributes[]
  listings            Listing[]
  vehicle_types       vehicle_types[]

  @@map("categories")
}

model Listing {
  id                 String               @id @default(cuid())
  title              String
  description        String?
  price              Decimal              @db.Decimal(12, 2)
  year               Int
  category_id        String
  vehicle_type_id    String
  brand_id           String?
  model_id           String?
  variant_id         String?
  status             ListingStatus        @default(DRAFT)
  is_active          Boolean              @default(true)
  is_approved        Boolean              @default(false)
  is_pending         Boolean              @default(true)
  view_count         Int                  @default(0)
  is_promoted        Boolean              @default(false)
  approved_by        String?
  approved_at        DateTime?
  rejected_at        DateTime?
  reject_reason      String?
  seller_name        String
  seller_phone       String
  seller_email       String
  city_id            String?
  district_id        String?
  created_at         DateTime             @default(now())
  updated_at         DateTime
  user_id            String
  color              String?
  engine_power       String?
  engine_volume      String?
  fuel_type          String?
  is_exchangeable    Boolean              @default(false)
  km                 Int?
  license_plate      String?
  neighborhood_id    String?
  transmission       String?
  vehicle_condition  String?
  complaints         complaints[]
  conversations      conversations[]
  favorites          Favorite[]
  listing_images     listing_images[]
  listing_properties listing_properties[]
  brands             brands?              @relation(fields: [brand_id], references: [id])
  categories         Category             @relation(fields: [category_id], references: [id])
  cities             cities?              @relation(fields: [city_id], references: [id])
  districts          districts?           @relation(fields: [district_id], references: [id])
  models             models?              @relation(fields: [model_id], references: [id])
  users              User                 @relation(fields: [user_id], references: [id], onDelete: Cascade)
  variants           variants?            @relation(fields: [variant_id], references: [id])
  vehicle_types      vehicle_types        @relation(fields: [vehicle_type_id], references: [id])

  @@map("listings")
}

model Message {
  id              String        @id @default(cuid())
  conversation_id String
  sender_id       String
  content         String
  is_read         Boolean       @default(false)
  is_edited       Boolean       @default(false)
  created_at      DateTime      @default(now())
  updated_at      DateTime
  conversations   conversations @relation(fields: [conversation_id], references: [id], onDelete: Cascade)
  users           User          @relation(fields: [sender_id], references: [id], onDelete: Cascade)

  @@map("messages")
}

model Favorite {
  id         String   @id @default(cuid())
  user_id    String
  listing_id String
  created_at DateTime @default(now())
  listings   Listing  @relation(fields: [listing_id], references: [id], onDelete: Cascade)
  users      User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, listing_id])
  @@map("favorites")
}

model Notification {
  id         String           @id @default(cuid())
  user_id    String
  type       NotificationType
  title      String
  message    String
  data       Json?
  is_read    Boolean          @default(false)
  created_at DateTime         @default(now())
  users      User             @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model brands {
  id              String        @id
  name            String
  vehicle_type_id String
  created_at      DateTime      @default(now())
  updated_at      DateTime
  image_url       String?
  vehicle_types   vehicle_types @relation(fields: [vehicle_type_id], references: [id], onDelete: Cascade)
  listings        Listing[]
  models          models[]
}

model category_attributes {
  id              String         @id
  category_id     String
  vehicle_type_id String?
  key             String
  label           String
  type            PropertyType
  is_required     Boolean        @default(false)
  is_filterable   Boolean        @default(false)
  sort_order      Int            @default(0)
  options         Json?
  categories      Category       @relation(fields: [category_id], references: [id])
  vehicle_types   vehicle_types? @relation(fields: [vehicle_type_id], references: [id])

  @@unique([category_id, vehicle_type_id, key])
}

model cities {
  id         String      @id
  name       String
  plate_code String?
  created_at DateTime    @default(now())
  updated_at DateTime
  districts  districts[]
  listings   Listing[]
}

model complaints {
  id                                     String            @id
  user_id                                String
  target_type                            ComplaintTarget
  target_user_id                         String?
  target_listing_id                      String?
  category                               ComplaintCategory
  description                            String?
  status                                 ComplaintStatus   @default(PENDING)
  admin_response                         String?
  admin_id                               String?
  created_at                             DateTime          @default(now())
  updated_at                             DateTime
  listings                               Listing?          @relation(fields: [target_listing_id], references: [id], onDelete: Cascade)
  users_complaints_target_user_idTousers User?             @relation("complaints_target_user_idTousers", fields: [target_user_id], references: [id], onDelete: Cascade)
  users_complaints_user_idTousers        User              @relation("complaints_user_idTousers", fields: [user_id], references: [id], onDelete: Cascade)
}

model conversations {
  id                                         String    @id
  participant1_id                            String
  participant2_id                            String
  listing_id                                 String?
  last_message_at                            DateTime?
  created_at                                 DateTime  @default(now())
  updated_at                                 DateTime
  listings                                   Listing?  @relation(fields: [listing_id], references: [id], onDelete: Cascade)
  users_conversations_participant1_idTousers User      @relation("conversations_participant1_idTousers", fields: [participant1_id], references: [id], onDelete: Cascade)
  users_conversations_participant2_idTousers User      @relation("conversations_participant2_idTousers", fields: [participant2_id], references: [id], onDelete: Cascade)
  messages                                   Message[]

  @@unique([participant1_id, participant2_id, listing_id])
}

model districts {
  id         String    @id
  name       String
  city_id    String
  created_at DateTime  @default(now())
  updated_at DateTime
  cities     cities    @relation(fields: [city_id], references: [id], onDelete: Cascade)
  listings   Listing[]
}

model feature_definitions {
  id             String         @id
  group_id       String
  key            String
  label          String
  sort_order     Int            @default(0)
  feature_groups feature_groups @relation(fields: [group_id], references: [id])

  @@unique([group_id, key])
}

model feature_groups {
  id                  String                @id
  vehicle_type_id     String
  name                String
  label               String
  sort_order          Int                   @default(0)
  feature_definitions feature_definitions[]
  vehicle_types       vehicle_types         @relation(fields: [vehicle_type_id], references: [id])

  @@unique([vehicle_type_id, name])
}

model listing_images {
  id         String  @id
  listing_id String
  url        String
  alt        String?
  sort_order Int     @default(0)
  listings   Listing @relation(fields: [listing_id], references: [id], onDelete: Cascade)
}

model listing_properties {
  id         String       @id
  listing_id String
  key        String
  value      String
  type       PropertyType
  listings   Listing      @relation(fields: [listing_id], references: [id], onDelete: Cascade)

  @@unique([listing_id, key])
}

model models {
  id         String     @id
  name       String
  brand_id   String
  created_at DateTime   @default(now())
  updated_at DateTime
  listings   Listing[]
  brands     brands     @relation(fields: [brand_id], references: [id], onDelete: Cascade)
  variants   variants[]
}

model variants {
  id         String    @id
  name       String
  model_id   String
  created_at DateTime  @default(now())
  updated_at DateTime
  listings   Listing[]
  models     models    @relation(fields: [model_id], references: [id], onDelete: Cascade)
}

model vehicle_types {
  id                  String                @id
  name                String
  category_id         String
  created_at          DateTime              @default(now())
  updated_at          DateTime
  image_url           String?
  brands              brands[]
  category_attributes category_attributes[]
  feature_groups      feature_groups[]
  listings            Listing[]
  categories          Category              @relation(fields: [category_id], references: [id], onDelete: Cascade)
}

enum ListingStatus {
  DRAFT
  ACTIVE
  INACTIVE
  SOLD
  EXPIRED
  REJECTED
  PENDING
}

enum NotificationType {
  LISTING_APPROVED
  LISTING_REJECTED
  LISTING_EXPIRED
  GENERAL
  COMPLAINT_RESPONSE
}

enum ComplaintCategory {
  MISLEADING_FAKE_AD
  WRONG_CATEGORY
  SPAM_DUPLICATE
  FRAUD_SUSPICION
  INAPPROPRIATE_CONTENT
  HARASSMENT_ABUSE
  PROHIBITED_ITEM
  OTHER
}

enum ComplaintStatus {
  PENDING
  RESOLVED
  REJECTED
}

enum ComplaintTarget {
  LISTING
  USER
}

enum PropertyType {
  STRING
  NUMBER
  BOOLEAN
  SELECT
  MULTISELECT
}

enum UserRole {
  USER
  ADMIN
  CORPORATE
}
