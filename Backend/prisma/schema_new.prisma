generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                            String                         @id @default(cuid())
  email                         String                         @unique
  password                      String?
  first_name                    String
  last_name                     String
  username                      String?                        @unique
  phone                         String?
  city                          String?
  district                      String?
  role                          UserRole                       @default(USER)
  is_active                     Boolean                        @default(true)
  is_email_verified             Boolean                        @default(false)
  reset_password_token          String?
  reset_password_expires        DateTime?
  last_login                    DateTime?
  login_attempts                Int                            @default(0)
  lock_until                    DateTime?
  created_at                    DateTime                       @default(now())
  updated_at                    DateTime                       @updatedAt
  email_verification_expires    DateTime?
  email_verification_token      String?
  google_id                     String?                        @unique
  provider                      String?                        @default("email")
  refresh_token                 String?
  refresh_token_expires         DateTime?
  avatar                        String?

  // Relations
  complaints_as_complainant     complaints[]                   @relation("ComplainantRelation")
  complaints_as_target          complaints[]                   @relation("TargetUserRelation")
  favorites                     Favorite[]
  listings                      Listing[]
  sent_messages                 Message[]                      @relation("MessageSender")
  notifications                 Notification[]
  conversation_participants     conversation_participants[]
  message_reads                 message_reads[]
  user_unread_counter           user_unread_counters?
  conversation_unread_counters  conversation_unread_counters[]

  @@map("users")
}

model Category {
  id                  String                @id @default(cuid())
  name                String
  created_at          DateTime              @default(now())
  updated_at          DateTime              @updatedAt
  category_attributes category_attributes[]
  listings            Listing[]
  vehicle_types       vehicle_types[]

  @@map("categories")
}

model Listing {
  id                 String           @id @default(cuid())
  title              String
  description        String?
  price              Decimal          @db.Decimal(12, 2)
  year               Int
  category_id        String
  vehicle_type_id    String
  brand_id           String?
  model_id           String?
  variant_id         String?
  status             ListingStatus    @default(DRAFT)
  is_active          Boolean          @default(true)
  is_approved        Boolean          @default(false)
  is_pending         Boolean          @default(true)
  view_count         Int              @default(0)
  is_promoted        Boolean          @default(false)
  approved_by        String?
  approved_at        DateTime?
  rejected_at        DateTime?
  reject_reason      String?
  seller_name        String
  seller_phone       String
  seller_email       String
  city_id            String?
  district_id        String?
  created_at         DateTime         @default(now())
  updated_at         DateTime         @updatedAt
  user_id            String
  color              String?
  engine_power       String?
  engine_volume      String?
  fuel_type          String?
  is_exchangeable    Boolean          @default(false)
  km                 Int?
  license_plate      String?
  neighborhood_id    String?
  transmission       String?
  vehicle_condition  String?
  images             Json?            @default("[]")

  // Relations
  complaints         complaints[]
  conversations      conversations[]
  favorites          Favorite[]
  listing_images     listing_images[]
  listing_properties listing_properties[]
  brands             brands?          @relation(fields: [brand_id], references: [id])
  categories         Category         @relation(fields: [category_id], references: [id])
  cities             cities?          @relation(fields: [city_id], references: [id])
  districts          districts?       @relation(fields: [district_id], references: [id])
  models             models?          @relation(fields: [model_id], references: [id])
  user               User             @relation(fields: [user_id], references: [id], onDelete: Cascade)
  variants           variants?        @relation(fields: [variant_id], references: [id])
  vehicle_types      vehicle_types    @relation(fields: [vehicle_type_id], references: [id])

  @@map("listings")
}

// Mesajlaşma Sistemi - Yeni Tablolar

model conversations {
  id                            String                         @id @default(cuid())
  listing_id                    String?
  least_user_id                 String
  greatest_user_id              String
  created_at                    DateTime                       @default(now())

  // Relations
  listing                       Listing?                       @relation(fields: [listing_id], references: [id], onDelete: Cascade)
  participants                  conversation_participants[]
  messages                      Message[]
  counters                      conversation_counters?
  message_reads                 message_reads[]
  unread_counters              conversation_unread_counters[]

  @@unique([least_user_id, greatest_user_id, listing_id])
  @@map("conversations")
}

model conversation_participants {
  id              String        @id @default(cuid())
  conversation_id String
  user_id         String
  role            String?       @default("participant")
  joined_at       DateTime      @default(now())

  // Relations
  conversation    conversations @relation(fields: [conversation_id], references: [id], onDelete: Cascade)
  user            User          @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([conversation_id, user_id])
  @@map("conversation_participants")
}

model Message {
  id              String        @id @default(cuid())
  conversation_id String
  sender_id       String
  body            String
  attachment_url  String?
  status          MessageStatus @default(SENT)
  created_at      DateTime      @default(now())

  // Relations
  conversation    conversations @relation(fields: [conversation_id], references: [id], onDelete: Cascade)
  sender          User          @relation("MessageSender", fields: [sender_id], references: [id], onDelete: Cascade)
  
  // Reverse relations for counters
  conversation_counters conversation_counters[] @relation("LastMessage")
  message_reads        message_reads[]         @relation("LastReadMessage")

  @@index([conversation_id, created_at])
  @@index([conversation_id, id])
  @@map("messages")
}

model message_reads {
  id                    String   @id @default(cuid())
  conversation_id       String
  user_id              String
  last_read_message_id String?
  updated_at           DateTime @default(now()) @updatedAt

  // Relations
  conversation         conversations @relation(fields: [conversation_id], references: [id], onDelete: Cascade)
  user                 User          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  last_read_message    Message?      @relation("LastReadMessage", fields: [last_read_message_id], references: [id])

  @@unique([conversation_id, user_id])
  @@map("message_reads")
}

model conversation_counters {
  conversation_id       String   @id
  last_message_id       String?
  last_message_preview  String?  @db.VarChar(160)
  last_message_at       DateTime?

  // Relations
  conversation          conversations @relation(fields: [conversation_id], references: [id], onDelete: Cascade)
  last_message          Message?      @relation("LastMessage", fields: [last_message_id], references: [id])

  @@index([last_message_at])
  @@map("conversation_counters")
}

model user_unread_counters {
  user_id      String   @id
  total_unread Int      @default(0)
  updated_at   DateTime @default(now()) @updatedAt

  // Relations
  user         User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("user_unread_counters")
}

model conversation_unread_counters {
  id              String   @id @default(cuid())
  conversation_id String
  user_id         String
  unread_count    Int      @default(0)
  updated_at      DateTime @default(now()) @updatedAt

  // Relations
  conversation    conversations @relation(fields: [conversation_id], references: [id], onDelete: Cascade)
  user            User          @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([conversation_id, user_id])
  @@map("conversation_unread_counters")
}

model blocked_users {
  id          String   @id @default(cuid())
  blocker_id  String
  blocked_id  String
  created_at  DateTime @default(now())

  @@unique([blocker_id, blocked_id])
  @@map("blocked_users")
}

// Mevcut diğer tablolar (değişmeden)

model Favorite {
  id         String   @id @default(cuid())
  user_id    String
  listing_id String
  created_at DateTime @default(now())
  listings   Listing  @relation(fields: [listing_id], references: [id], onDelete: Cascade)
  users      User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, listing_id])
  @@map("favorites")
}

model Notification {
  id         String           @id @default(cuid())
  user_id    String
  type       NotificationType
  title      String
  message    String
  data       Json?
  is_read    Boolean          @default(false)
  created_at DateTime         @default(now())
  users      User             @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model brands {
  id              String        @id
  name            String
  vehicle_type_id String
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt
  image_url       String?
  vehicle_types   vehicle_types @relation(fields: [vehicle_type_id], references: [id], onDelete: Cascade)
  listings        Listing[]
  models          models[]
}

model category_attributes {
  id              String         @id
  category_id     String
  vehicle_type_id String?
  key             String
  label           String
  type            PropertyType
  is_required     Boolean        @default(false)
  is_filterable   Boolean        @default(false)
  sort_order      Int            @default(0)
  options         Json?
  categories      Category       @relation(fields: [category_id], references: [id])
  vehicle_types   vehicle_types? @relation(fields: [vehicle_type_id], references: [id])

  @@unique([category_id, vehicle_type_id, key])
}

model cities {
  id         String      @id
  name       String
  plate_code String?
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt
  districts  districts[]
  listings   Listing[]
}

model complaints {
  id                String            @id
  user_id           String
  target_type       ComplaintTarget
  target_user_id    String?
  target_listing_id String?
  category          ComplaintCategory
  description       String?
  status            ComplaintStatus   @default(PENDING)
  admin_response    String?
  admin_id          String?
  created_at        DateTime          @default(now())
  updated_at        DateTime          @updatedAt
  listings          Listing?          @relation(fields: [target_listing_id], references: [id], onDelete: Cascade)
  target_user       User?             @relation("TargetUserRelation", fields: [target_user_id], references: [id], onDelete: Cascade)
  complainant       User              @relation("ComplainantRelation", fields: [user_id], references: [id], onDelete: Cascade)
}

model districts {
  id         String    @id
  name       String
  city_id    String
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  cities     cities    @relation(fields: [city_id], references: [id], onDelete: Cascade)
  listings   Listing[]
}

model feature_definitions {
  id             String         @id
  group_id       String
  key            String
  label          String
  sort_order     Int            @default(0)
  feature_groups feature_groups @relation(fields: [group_id], references: [id])

  @@unique([group_id, key])
}

model feature_groups {
  id                  String                @id
  vehicle_type_id     String
  name                String
  label               String
  sort_order          Int                   @default(0)
  feature_definitions feature_definitions[]
  vehicle_types       vehicle_types         @relation(fields: [vehicle_type_id], references: [id])

  @@unique([vehicle_type_id, name])
}

model listing_images {
  id         String  @id
  listing_id String
  url        String
  alt        String?
  sort_order Int     @default(0)
  listings   Listing @relation(fields: [listing_id], references: [id], onDelete: Cascade)
}

model listing_properties {
  id         String       @id
  listing_id String
  key        String
  value      String
  type       PropertyType
  listings   Listing      @relation(fields: [listing_id], references: [id], onDelete: Cascade)

  @@unique([listing_id, key])
}

model models {
  id         String     @id
  name       String
  brand_id   String
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  listings   Listing[]
  brands     brands     @relation(fields: [brand_id], references: [id], onDelete: Cascade)
  variants   variants[]
}

model variants {
  id         String    @id
  name       String
  model_id   String
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  listings   Listing[]
  models     models    @relation(fields: [model_id], references: [id], onDelete: Cascade)
}

model vehicle_types {
  id                  String                @id
  name                String
  category_id         String
  created_at          DateTime              @default(now())
  updated_at          DateTime              @updatedAt
  image_url           String?
  brands              brands[]
  category_attributes category_attributes[]
  feature_groups      feature_groups[]
  listings            Listing[]
  categories          Category              @relation(fields: [category_id], references: [id], onDelete: Cascade)
}

// Enums
enum ListingStatus {
  DRAFT
  ACTIVE
  INACTIVE
  SOLD
  EXPIRED
  REJECTED
  PENDING
}

enum NotificationType {
  LISTING_APPROVED
  LISTING_REJECTED
  LISTING_EXPIRED
  GENERAL
  COMPLAINT_RESPONSE
  MESSAGE_RECEIVED
  CONVERSATION_NEW
}

enum ComplaintCategory {
  MISLEADING_FAKE_AD
  WRONG_CATEGORY
  SPAM_DUPLICATE
  FRAUD_SUSPICION
  INAPPROPRIATE_CONTENT
  HARASSMENT_ABUSE
  PROHIBITED_ITEM
  OTHER
}

enum ComplaintStatus {
  PENDING
  RESOLVED
  REJECTED
}

enum ComplaintTarget {
  LISTING
  USER
}

enum PropertyType {
  STRING
  NUMBER
  BOOLEAN
  SELECT
  MULTISELECT
}

enum UserRole {
  USER
  ADMIN
  CORPORATE
}

enum MessageStatus {
  SENT
  DELIVERED
  READ
}
