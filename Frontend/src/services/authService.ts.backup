import axios, { AxiosResponse } from 'axios';
import { User, LoginRequest, RegisterRequest, AuthResponse, ApiRespons      console.log('✅ Login response:', response.data);
      console.log('🔍 DEBUG: User object from backend:', response.data.data?.user);
      console.log('🔍 DEBUG: User role from backend:', response.data.data?.user?.role);
      
      if (response.data.success && response.data.data) {
        return response.data.data;
      }rom '../types';

// ✅ Ortak helper: token'ı hem local hem session'dan oku
const getStoredToken = () =>
  localStorage.getItem('token') || sessionStorage.getItem('token');

// Multiple API endpoints for failover
const API_ENDPOINTS = [
  import.meta.env.VITE_API_BASE_URL || 'https://trucksbusbackend-production-0e23.up.railway.app/api',
  'https://trucksbusbackend-production-0e23.up.railway.app/api',
  'http://localhost:3001/api' // Development fallback
];

const API_BASE_URL = API_ENDPOINTS[0];
console.log('🌐 Using API Base URL:', API_BASE_URL);

// Token validation state management
let isValidatingToken = false;
let isTokenInvalid = false;

const api = axios.create({
  baseURL: API_BASE_URL,
  timeout: 30000, // 30 saniye timeout
  headers: {
    'Content-Type': 'application/json',
    'Accept': 'application/json',
  },
});

// ✅ Request interceptor artık her iki depoyu da kontrol ediyor
api.interceptors.request.use((config) => {
  const token = getStoredToken(); // <-- önemli değişiklik
  if (token) {
    config.headers.Authorization = `Bearer ${token}`;
    console.log('🎟️ Added token to request:', config.url);
  }
  return config;
});

// ✅ 401'de her iki depoyu da temizle
api.interceptors.response.use(
  (response) => response,
  (error) => {
    if (error.response?.status === 401) {
      localStorage.removeItem('token');
      localStorage.removeItem('user');
      localStorage.removeItem('rememberMe');
      sessionStorage.removeItem('token');
      sessionStorage.removeItem('user');
      console.log('🚫 401 error - clearing auth data and dispatching event');
      // Uygulamaya haber ver
      window.dispatchEvent(new Event('auth:unauthorized'));
    }
    return Promise.reject(error);
  }
);

export const authService = {
  login: async (credentials: LoginRequest): Promise<AuthResponse> => {
    try {
      console.log('🔐 Login attempt:', { email: credentials.email, hasPassword: !!credentials.password });
      console.log('🌐 API URL:', `${API_BASE_URL}/auth/login`);
      
      const response: AxiosResponse<ApiResponse<AuthResponse>> = await api.post('/auth/login', {
        email: credentials.email,
        password: credentials.password,
        rememberMe: credentials.rememberMe || false
      });
      
      console.log('✅ Login response:', response.data);
      
      if (response.data.success && response.data.data) {
        console.log('👤 DEBUG authService: User data received:', response.data.data.user);
        console.log('🔑 DEBUG authService: User role:', response.data.data.user?.role);
        return response.data.data;
      }
      throw new Error(response.data.message || 'Giriş başarısız');
    } catch (error: any) {
      console.error('❌ Login error:', error);
      console.error('❌ Error response:', error.response?.data);
      console.error('❌ Error status:', error.response?.status);
      console.error('❌ Error message:', error.message);
      
      // Network error handling
      if (error.code === 'ERR_NETWORK' || error.message.includes('Network Error')) {
        throw new Error('Sunucuya bağlanılamıyor. İnternet bağlantınızı kontrol edin.');
      }
      
      // Timeout error handling  
      if (error.name === 'AbortError' || error.code === 'ECONNABORTED') {
        throw new Error('İşlem zaman aşımına uğradı. Lütfen tekrar deneyin.');
      }
      
      const errorMessage = error.response?.data?.message || error.message || 'Giriş başarısız';
      throw new Error(errorMessage);
    }
  },

  register: async (userData: RegisterRequest): Promise<AuthResponse> => {
    try {
      console.log('📝 Register attempt:', { email: userData.email, firstName: userData.firstName });
      
      // Frontend'den gelen userData'yı backend formatına dönüştür
      const backendData = {
        email: userData.email,
        password: userData.password,
        first_name: userData.firstName,
        last_name: userData.lastName,
        phone: userData.phone,
        kvkk_accepted: userData.kvkkAccepted || false,
      };
      
      console.log('📤 Sending register data:', backendData);
      
      const response: AxiosResponse<ApiResponse<AuthResponse>> = await api.post('/auth/register', backendData);
      
      console.log('✅ Register response:', response.data);
      
      if (response.data.success && response.data.data) {
        return response.data.data;
      }
      throw new Error(response.data.message || 'Kayıt başarısız');
    } catch (error: any) {
      console.error('❌ Register error:', error);
      console.error('❌ Error response:', error.response?.data);
      console.error('❌ Error status:', error.response?.status);
      
      const errorMessage = error.response?.data?.message || error.message || 'Kayıt başarısız';
      throw new Error(errorMessage);
    }
  },

  logout: async (): Promise<void> => {
    try {
      await api.post('/auth/logout');
    } catch (error) {
      // Silent fail for logout
    } finally {
      localStorage.removeItem('token');
    }
  },

  refreshToken: async (): Promise<string> => {
    try {
      const refreshToken = localStorage.getItem('refreshToken');
      const response: AxiosResponse<ApiResponse<{ token: string }>> = await api.post('/auth/refresh', {
        refreshToken
      });
      if (response.data.success && response.data.data) {
        const newToken = response.data.data.token;
        localStorage.setItem('token', newToken);
        return newToken;
      }
      throw new Error('Token yenileme başarısız');
    } catch (error) {
      throw new Error('Token yenileme başarısız');
    }
  },

  verifyToken: async (token: string): Promise<User> => {
    if (!token) throw new Error('No token to verify');
    
    // Prevent concurrent token verifications
    if (isValidatingToken) {
      console.log('� Token verification already in progress, skipping...');
      throw new Error('Token verification already in progress');
    }
    
    // Check if token is known to be invalid
    if (isTokenInvalid) {
      console.log('🚫 Token is marked as invalid, skipping verification');
      throw new Error('Token is invalid');
    }
    
    isValidatingToken = true;
    
    try {
      console.log('🔍 Verifying token...');
      const response: AxiosResponse<ApiResponse<{ user: User }>> = await api.get('/auth/me', {
        headers: { Authorization: `Bearer ${token}` },
      });
      console.log('✅ Token verification successful');
      
      if (!response.data?.success || !response.data?.data?.user) {
        throw new Error('Token doğrulama başarısız');
      }
      
      return response.data.data.user;
    } catch (error: any) {
      console.error('❌ Token verification failed:', error);
      isTokenInvalid = true;
      throw new Error(error.response?.data?.message || 'Token doğrulama başarısız');
    } finally {
      isValidatingToken = false;
    }
  },

  forgotPassword: async (email: string): Promise<void> => {
    try {
      const response: AxiosResponse<ApiResponse<any>> = await api.post('/auth/forgot-password', { email });
      if (!response.data.success) {
        throw new Error(response.data.message || 'Şifre sıfırlama isteği başarısız');
      }
    } catch (error: any) {
      throw error;
    }
  },

  resetPassword: async (token: string, password: string): Promise<void> => {
    try {
      const response: AxiosResponse<ApiResponse<any>> = await api.post('/auth/reset-password', { 
        token,
        newPassword: password 
      });
      if (!response.data.success) {
        throw new Error(response.data.message || 'Şifre sıfırlama başarısız');
      }
    } catch (error: any) {
      throw error;
    }
  }
};

export { api };
export default api;
